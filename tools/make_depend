#! /usr/bin/env python

import os
import re

files = {}

pattern = re.compile(r'^\s*#\s*include\s*"([^"]+)"')

def scanfile(filename):
    if filename in files: return
    files[filename] = [filename]
    for line in open(filename):
        match = pattern.match(line)
        if match:
            file = match.group(1)
            for d in ("", "../lib/"):
                if os.path.exists(d + file):
                    files[filename].append(d + file)
                    scanfile(d + file)
                    break
            else:
                print "While scanning " + filename + ": " + file + " not found"

def find_all_includes(includes, filename):
    for file in files[filename]:
        if file not in includes:
            includes.append(file)
            find_all_includes(includes, file)

def make_depend():

    for file in os.listdir("."):
        if file.endswith(".c"):
            scanfile(file)

    sourcefiles = filter(lambda x: x.endswith(".c"), files.keys())
    sourcefiles.sort()

    makefile = "Makefile"
    tmpmakefile = "Makefile.tmp"
    fi = open(makefile)
    fo = open(tmpmakefile, "w")
    for line in fi:
        if line == "###\n": break
        fo.write(line)
    fi.close()
    fo.write("###\n")
    for file in sourcefiles:
        obj = file[:-2] + ".o"
        fo.write(obj + ":")
        includes = []
        find_all_includes(includes, file)
        includes.sort()
        for file in includes:
            fo.write("\\\n\t" + file)
        fo.write("\n")
    fo.close()
    if open(makefile).read() == open(tmpmakefile).read():
        os.remove(tmpmakefile)
    else:
        os.remove(makefile)
        os.rename(tmpmakefile, makefile)

if __name__ == "__main__": make_depend()
