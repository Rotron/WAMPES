#! /usr/bin/perl -w

# Dieter Deyke
# November 14, 1997
# Copyright (c) 1997-2000 CoCreate Software GmbH. All Rights Reserved.
# Company Confidential

require 5.003;

use Symbol;

use strict;

# -*- CPerl -*-

# Dieter Deyke
# February 14, 2000
# Copyright (c) 2000-2000 CoCreate Software GmbH. All Rights Reserved.
# Company Confidential

use Symbol;

# -*- CPerl -*-

# Dieter Deyke
# February 14, 2000
# Copyright (c) 2000-2000 CoCreate Software GmbH. All Rights Reserved.
# Company Confidential

# Return basename of path

sub basename {

	my ($file) = @_;

	$file =~ s!.*[/\\]!!;
	return $file;
}

1;
# -*- CPerl -*-

# Dieter Deyke
# February 14, 2000
# Copyright (c) 2000-2000 CoCreate Software GmbH. All Rights Reserved.
# Company Confidential

# Return dirname of path

sub dirname {

	my ($dir) = @_;

	$dir =~ s![/\\][^/\\]*$!! or return '.';
	return '/' if $dir eq '';
	return $dir;
}

1;
# -*- CPerl -*-

# Dieter Deyke
# February 14, 2000
# Copyright (c) 2000-2000 CoCreate Software GmbH. All Rights Reserved.
# Company Confidential

# -*- CPerl -*-

# Dieter Deyke
# February 14, 2000
# Copyright (c) 2000-2000 CoCreate Software GmbH. All Rights Reserved.
# Company Confidential

use Symbol;

# Compare two files, returning:
#
# 0 --> Files are identical.
# 1 --> Files are not identical.
# 2 --> One or both files inaccessible.

sub cmpfiles {

	my ($file1, $file2) = @_;

	my ($buffer1, $n1);
	my ($buffer2, $n2);
	my ($fh1, $fh2);
	my ($retval);

	return 2 unless -e $file1;
	$n1 = -s _;
	return 2 unless -e $file2;
	$n2 = -s _;
	return 1 unless $n1 == $n2;
	$fh1 = gensym();
	open($fh1, $file1) or return 2;
	binmode($fh1);
	$fh2 = gensym();
	open($fh2, $file2) or return 2;
	binmode($fh2);
	$retval = 0;
	$buffer1 = $buffer2 = '';
	while ($n1 = sysread($fh1, $buffer1, 8192)) {
		$n2 = sysread($fh2, $buffer2, 8192);
		if ($n1 != $n2 or $buffer1 ne $buffer2) {
			$retval = 1;
			last;
		}
	}
	close($fh1);
	close($fh2);
	return $retval;
}

1;

sub selectfile {

	my ($oldfile, $newfile) = @_;

	my (@statbuf);

	if (cmpfiles($oldfile, $newfile)) {
		if (@statbuf = stat($oldfile)) {
			chmod($statbuf[2] & 0777, $newfile) or die("chmod(\"$newfile\"): $!\n");
		}
		unlink($oldfile);
		rename($newfile, $oldfile) or die("rename(\"$newfile\", \"$oldfile\"): $!\n");
	} else {
		unlink($newfile) or die("$newfile: $!\n");
	}
}

1;

# Trim one file

sub trimfile {

	my ($filename) = @_;

	my ($base);
	my ($blank_lines_skipped) = -1;
	my ($current_year) = (localtime(time()))[5] + 1900;
	my ($dst);
	my ($istextfile);
	my ($line);
	my ($src);
	my ($tmpfilename) = "$filename.tmp";

	$src = gensym();
	open($src, dirname($filename) . '/CVS/Entries') or return;
	$istextfile = 0;
	$base = basename($filename);
	while ($line = <$src>) {
		if ($line =~ m!^/$base.*//$!) {
			$istextfile = 1;
		}
	}
	close($src);
	return unless $istextfile;

	$src = gensym();
	open($src, $filename) or die("$filename: $!\n");
	$dst = gensym();
	open($dst, ">$tmpfilename") or die("$tmpfilename: $!\n");
	while (defined($line = <$src>)) {
		# Fix copyright dates
		$line =~ s!(copyright.*19[89]\d)\s*-\s*\d\d\d\d!"$1-$current_year"!ei;
		# Remove trailing whitespace
		$line =~ s!\s+$!!;
		# Expand tabs
		while ($line =~ s!^([^\t]*)(\t+)!$1 . (' ' x (length($2) * 8 - (length($1) % 8)))!e) {
		}
		# Unexpand leading spaces
		$line =~ s!^( +)!("\t" x ((length($1) / 8))) . (' ' x ((length($1) % 8)))!e;
		# Remove casts of function return values to void
		$line =~ s!^(\s*)\(\s*void\s*\)\s*!$1! unless $line =~ m!\(void\),!;
		# Output line
		if ($line ne '') {
			print($dst "\n") if $blank_lines_skipped == 1;
			print($dst "$line\n");
			$blank_lines_skipped = 0;
		} else {
			$blank_lines_skipped = 1 if $blank_lines_skipped == 0;
		}
	}
	close($src);
	close($dst);
	selectfile($filename, $tmpfilename);
}

1;

#------------------------------------------------------------------------------

# Trim modified text files

sub trimfiles {

	my ($fh);
	my ($file);
	my ($line);
	my ($timestamp);
	my ($timestampfile);
	my (@files);

	if (@ARGV) {
		foreach $file (@ARGV) {
			trimfile($file);
		}
		return;
	}

	$timestampfile = '.trimtime';
	$timestamp = (-f $timestampfile) ? (-M $timestampfile) : 1e99;

	$fh = gensym();

	@files = ();
	open($fh, 'cvs -q -n update |') or die("cvs: $!\n");
	while (defined($line = <$fh>)) {
		push(@files, $2) if $line =~ m!^(A|M) (.*)\n!;
	}
	close($fh);
	foreach $file (@files) {
		trimfile($file) if (-M $file) < $timestamp;
	}

	unlink($timestampfile);
	open($fh, ">$timestampfile") or die("$timestampfile: $!\n");
	print($fh "\n");
	close($fh);
}

#------------------------------------------------------------------------------

trimfiles();
